<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="d6838b4c-9ebf-477b-8b56-c97d773c576b" name="Default Changelist" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_DATA_SOURCES" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
    <option name="HIDDEN_KINDS">
      <set />
    </option>
    <expand />
    <select />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="ProjectId" id="1UQk7lCDc4tUuavrwwogvgDINnX" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showExcludedFiles" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="cursive.last.file.extension.C\:/Users/andyl/IdeaProjects/fp-assignment-1/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/src/fp_assignment_1/tasks" />
    <property name="project.structure.last.edited" value="Project" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.0" />
    <property name="settings.editor.selected.configurable" value="preferences.keymap" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\andyl\IdeaProjects\fp-assignment-1\src\fp_assignment_1\tasks" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\andyl\IdeaProjects\fp-assignment-1\src" />
    </key>
  </component>
  <component name="ReplState" timestamp="1577994748837">{:repl-history {:ide [], :local [{:command &quot;(-&gt;&gt; dataset\n     (filter #(not= (select-keys % [\&quot;:@computed_region_cbhk_fwbd\&quot; \&quot;:@computed_region_nnqa_25f4\&quot;]))))&quot;, :offset 32, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(-&gt;&gt; dataset\n     (map #(select-keys % [\&quot;:@computed_region_cbhk_fwbd\&quot; \&quot;:@computed_region_nnqa_25f4\&quot;])))&quot;, :offset 22, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(-&gt;&gt; dataset\n     (filter #(contains? (select-keys % [\&quot;:@computed_region_cbhk_fwbd\&quot; \&quot;:@computed_region_nnqa_25f4\&quot;]))))&quot;, :offset 37, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(select-keys dataset [\&quot;:@computed_region_cbhk_fwbd\&quot; \&quot;:@computed_region_nnqa_25f4\&quot;])&quot;, :offset 20, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(select-keys (first dataset) [\&quot;:@computed_region_cbhk_fwbd\&quot; \&quot;:@computed_region_nnqa_25f4\&quot;])&quot;, :offset 20, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(select-keys (last dataset) [\&quot;:@computed_region_cbhk_fwbd\&quot; \&quot;:@computed_region_nnqa_25f4\&quot;])&quot;, :offset 18, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(select-keys #( dataset) [\&quot;:@computed_region_cbhk_fwbd\&quot; \&quot;:@computed_region_nnqa_25f4\&quot;])&quot;, :offset 15, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(map #(println %) dataset)&quot;, :offset 25, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(map #(filter (= % \&quot;name\&quot;)) dataset)&quot;, :offset 24, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(map #(filter #(contains? \&quot;name\&quot;)) dataset)&quot;, :offset 15, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(map #(filter (contains? \&quot;name\&quot;)) dataset)&quot;, :offset 14, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(map #(%dataset)&quot;, :offset 8, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(map #(%) dataset)&quot;, :offset 8, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(map #(type %) dataset)&quot;, :offset 11, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(map #(get % \&quot;name\&quot;) dataset)&quot;, :offset 18, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(map #(get % (select-keys % [\&quot;:@computed_region_cbhk_fwbd\&quot; \&quot;:@computed_region_nnqa_25f4\&quot;])) dataset)&quot;, :offset 90, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(map #(get % [\&quot;:@computed_region_cbhk_fwbd\&quot; \&quot;:@computed_region_nnqa_25f4\&quot;]) dataset)&quot;, :offset 74, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(map #(select-keys % [\&quot;:@computed_region_cbhk_fwbd\&quot; \&quot;:@computed_region_nnqa_25f4\&quot;]) dataset)&quot;, :offset 18, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(def filtered (map #(select-keys % [\&quot;:@computed_region_cbhk_fwbd\&quot; \&quot;:@computed_region_nnqa_25f4\&quot;]) dataset))&quot;, :offset 14, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(clojure.set/union dataset filtered)&quot;, :offset 35, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(clojure.set/union filtered dataset )&quot;, :offset 28, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(clojure.set/difference filtered dataset )&quot;, :offset 23, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(clojure.set/map-invert filtered dataset)&quot;, :offset 23, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(clojure.set/join filtered dataset)&quot;, :offset 17, :ns &quot;fp-assignment-1.tasks.four&quot;} {:command &quot;(def denomination-kind [1 5 10 25])\n\n(defn- cc [amount denominations]\n  (cond (= amount 0) 1\n        (or (&lt; amount 0) (empty? denominations)) 0\n        :else (+ (cc amount (rest denominations))\n                 (cc (- amount (first denominations)) denominations))))\n\n(defn count-change\n  \&quot;Calculates the number of times you can give change with the given denominations.\&quot;\n  [amount denominations]\n  (cc amount denominations))&quot;, :offset 424, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(def denomination-kind [100 50 20 10 5 2 1])&quot;, :offset 42, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count-change 100)&quot;, :offset 17, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count-change 100 denomination-kind)&quot;, :offset 35, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(def coins [100 50 20 10 5 2 1])&quot;, :offset 32, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn anz\n  [amount coin_count]\n  (cond\n    (or (&lt; amount 0) (= coin_count 0)) 0\n    (= amount 0) 1\n    :else (+ (anz amount (dec coin_count))\n             (anz (- amount (nth coins coin_count) coin_count)))))&quot;, :offset 209, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn anz\n  [amount coin_count]\n  (cond\n    (or (&lt; amount 0) (= coin_count 0)) 0\n    (= amount 0) 1\n    :else (+ (anz amount (dec coin_count))\n             (anz (- (amount (nth coins coin_count)) coin_count)))))&quot;, :offset 211, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(anz 0 (count coins))&quot;, :offset 6, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(anz -0 (count coins))&quot;, :offset 6, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(anz -1 (count coins))&quot;, :offset 7, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn anz\n  [amount coin_count]\n  (cond\n    (or (&lt; amount 0) (= coin_count 0)) 0\n    (= amount 0) 1\n    :else (+ (anz amount (dec coin_count))\n             (anz (- amount (nth coins coin_count)) coin_count))))&quot;, :offset 209, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(anz 100 (count coins))&quot;, :offset 23, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(nth coins 5)&quot;, :offset 12, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(nth coins 7)&quot;, :offset 12, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(nth coins 6)&quot;, :offset 12, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(anz 100 6)&quot;, :offset 10, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(def coins [100 50 25 10 5 1])&quot;, :offset 21, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(def anz (memoize anz))&quot;, :offset 23, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(anz 100 5)&quot;, :offset 8, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(anz 100 5)0&quot;, :offset 12, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(anz 1000 5)&quot;, :offset 9, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(anz 10000 5)&quot;, :offset 10, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn count_change_upwards\n  [amount]\n  (-&gt;&gt; (range (inc amount))\n       (map #(anz % (dec (count coins))))\n       (last)))&quot;, :offset 123, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_change_upwards 1000000)&quot;, :offset 29, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(anz 1000000 5)&quot;, :offset 12, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;\n(defn tester\n  [change]\n  (letfn [(branch_coin\n            [change counter coin_set]\n            (let [xf (map #(count_by_conditions change % counter coin_set))]\n              (-&gt;&gt; (get_coin_types_by_change change)\n                   (transduce xf +'))))\n          (count_by_conditions\n            [change coin_type counter coin_set]\n            (let [modded_change (mod change coin_type)\n                  is_coin_gt_one (&gt; coin_type 1)\n                  is_mod_eq_zero (= modded_change 0)\n                  is_change_gt_coin (&gt; change coin_type)\n                  sorted_map (sort (if is_coin_gt_one (conj coin_set coin_type) (add_ones change coin_set)))\n                  hash_code (hash sorted_map)\n                  is_coin_set_nil (nil? (get @memset hash_code))\n                  condition_1 (and is_coin_gt_one is_change_gt_coin)\n                  condition_2 (and is_mod_eq_zero is_coin_set_nil)]\n              (cond\n                condition_1 (branch_coin (- change coin_type) counter sorted_map)\n                condition_2 (do (store_set sorted_map) (inc counter))\n                :else counter\n                )))]\n    (branch_coin change 0 [])))&quot;, :offset 1, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(repeat 1 5)&quot;, :offset 11, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn count_change_upwards\n  [amount]\n  (letfn [(count_recursor\n            [amount coin_count]\n            (cond\n              (or (&lt; amount 0) (= coin_count 0)) 0\n              (= amount 0) 1\n              :else (+ (count_recursor amount (dec coin_count))\n                       (count_recursor (- amount (nth coin_types coin_count)) coin_count))))]\n    (-&gt;&gt; (range (inc amount))\n         (map #(count_recursor % 5))\n         (last))))&quot;, :offset 437, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn count_change_upwards\n  [amount]\n  (letfn [(count_recursor\n            [amount coin_count]\n            (cond\n              (or (&lt; amount 0) (= coin_count 0)) 0\n              (= amount 0) 1\n              :else (+ (count_recursor amount (dec coin_count))\n                       (count_recursor (- amount (nth [100 50 25 10 1] coin_count)) coin_count))))]\n    (-&gt;&gt; (range (inc amount))\n         (map #(count_recursor % 5))\n         (last))))&quot;, :offset 328, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn count_change_upwards\n  [amount]\n  (letfn [(count_recursor\n            [amount coin_count]\n            (cond\n              (or (&lt; amount 0) (= coin_count 0)) 0\n              (= amount 0) 1\n              :else (+ (count_recursor amount (dec coin_count))\n                       (count_recursor (- amount (nth [100 50 25 10 5 1] coin_count)) coin_count))))]\n    (-&gt;&gt; (range (inc amount))\n         (map #(count_recursor % 5))\n         (last))))&quot;, :offset 327, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn count-change-up\n  [amount coins]\n  (-&gt;&gt; (range (inc amount))\n       (map #(count-change % coins))\n       last))\n\n(time (count-change-up 1000000 [5 10 20 50 100 200]))&quot;, :offset 172, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn count-change\n  [amount coins]\n  (cond (= amount 0) 1\n        (or (&lt; amount 0) (zero? (count coins))) 0\n        :else (+ (count-change amount (rest coins))\n                 (count-change (- amount (first coins)) coins))))&quot;, :offset 226, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(def count-change (memoize count-change))&quot;, :offset 41, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn count-change\n  [amount coins]\n  (cond (= amount 0) 1\n        (or (&lt; amount 0) (zero? (count coins))) 0\n        :else (+ (count-change amount (rest coins))\n                 (count-change (- amount (first coins)) coins))))\n(def count-change (memoize count-change))&quot;, :offset 267, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count-change 100 [25 10 5 1])&quot;, :offset 19, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn count-change-up\n  [amount coins]\n  (-&gt;&gt; (range (inc amount))\n       (map #(count-change % coins))\n       last))&quot;, :offset 117, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count-change-up 100 [100 50 25 10 5 1])&quot;, :offset 16, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count-change-up 1000000 [100 50 25 10 5 1])&quot;, :offset 24, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count-change-up 1000000N [100 50 25 10 5 1])&quot;, :offset 25, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count-change 100 [100 50 25 10 5 1])&quot;, :offset 17, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn count_recursor\n  [amount coin_count]\n  (cond\n    (or (&lt; amount 0) (= coin_count 0)) 0\n    (= amount 0) 1\n    :else (+' (count_recursor amount (dec coin_count))\n              (count_recursor (-' amount (nth [100 50 25 10 5 1] coin_count)) coin_count))))&quot;, :offset 254, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_recursor 100 5)&quot;, :offset 21, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_recursor 100 6)&quot;, :offset 21, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(nth [100 50 25 10 5 1] 6)&quot;, :offset 25, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(get [100 50 25 10 5 1] 6)&quot;, :offset 4, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn count_recursor\n  [amount coin_count]\n  (cond\n    (or (&lt; amount 0) (= coin_count 0)) 0\n    (= amount 0) 1\n    :else (+' (count_recursor amount (dec coin_count))\n              (count_recursor (-' amount (nth [25 10 5 1] coin_count)) coin_count))))&quot;, :offset 213, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_recursor 25 3)&quot;, :offset 18, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(get {  1 25\n        2 10\n        3 5\n        4 1 } 6)&quot;, :offset 50, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(get {  1 25\n        2 10\n        3 5\n        4 1 } 4)&quot;, :offset 53, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(get {  1 25\n        2 10\n        3 5\n        4 1 } 3)&quot;, :offset 53, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(get {  1 25\n        2 10\n        3 5\n        4 1 } 2)&quot;, :offset 53, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(get {  1 25\n        2 10\n        3 5\n        4 1 } 1)&quot;, :offset 53, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(get  6)&quot;, :offset 5} {:command &quot;(defn count_recursor\n  [amount coin_count]\n  (cond\n    (or (&lt; amount 0) (= coin_count 0)) 0\n    (= amount 0) 1\n    :else (+' (count_recursor amount (dec coin_count))\n              (count_recursor (-' amount (get { 1 25, 2 10, 3 5, 4 1 } coin_count)) coin_count))))&quot;, :offset 234, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_recursor 25 4)&quot;, :offset 20, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count {1 25, 2 10, 3 5, 4 1})&quot;, :offset 7, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_recursor 100 4)&quot;, :offset 19, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_recursor 200 4)&quot;, :offset 17, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_recursor 500 4)&quot;, :offset 17, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(def count_recursor (memoize count_recursor))&quot;, :offset 45, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_recursor 10000 4)&quot;, :offset 21, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_recursor 2000 4)&quot;, :offset 17, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn count_change_upwards\n  [amount coins_scoped]\n  (-&gt;&gt; (range (inc amount))\n       (map #(count_recursor % (count coins_scoped)))\n       (last)))&quot;, :offset 148, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_change_upwards 2000 4)&quot;, :offset 21, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_change_upwards 2000 {1 100, 2 50, 3 25, 4 10, 5 5, 6 1})&quot;, :offset 62, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_change_upwards 1000 {1 100, 2 50, 3 25, 4 10, 5 5, 6 1})&quot;, :offset 23, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_change_upwards 100 {1 100, 2 50, 3 25, 4 10, 5 5, 6 1})&quot;, :offset 23, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn count_change_upwards\n  [amount]\n  (-&gt;&gt; (range (inc amount))\n       (map #(count_recursor % 6))\n       (last)))&quot;, :offset 36, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_change_upwards 100)&quot;, :offset 25, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_change_upwards 1)&quot;, :offset 23, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_recursor 1000 4)&quot;, :offset 20, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(defn count_recursor\n  [amount coin_count]\n  (cond\n    (or (&lt; amount 0) (= coin_count 0)) 0\n    (= amount 0) 1\n    :else (+' (count_recursor amount (dec coin_count))\n              (count_recursor (-' amount (get {1 100, 2 50, 3 25, 4 10, 5 5, 6 1} coin_count)) coin_count))))&quot;, :offset 247, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(count_recursor 1000 6)&quot;, :offset 22, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(lazy-seq 12)&quot;, :offset 12, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(lazy-seq [12])&quot;, :offset 11, :ns &quot;fp-assignment-1.core&quot;} {:command &quot;(lazy-seq [\&quot;Data type not supported\&quot;])&quot;, :offset 35, :ns &quot;fp-assignment-1.core&quot;}], :remote []}}</component>
  <component name="RunManager" selected="Clojure Application.core">
    <configuration name="REPL for fp-assignment-1" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="fp-assignment-1" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="fixLineNumbers" value="false" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="fp-assignment-1" />
      <setting name="path" value="$PROJECT_DIR$/src/fp_assignment_1/core.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/fp_assignment_1" />
      <method v="2" />
    </configuration>
    <configuration name="four" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="fp-assignment-1" />
      <setting name="path" value="$PROJECT_DIR$/src/fp_assignment_1/tasks/four.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/fp_assignment_1/tasks" />
      <method v="2" />
    </configuration>
    <configuration name="one" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="fp-assignment-1" />
      <setting name="path" value="$PROJECT_DIR$/src/fp_assignment_1/tasks/one.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/fp_assignment_1/tasks" />
      <method v="2" />
    </configuration>
    <configuration name="three" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="fp-assignment-1" />
      <setting name="path" value="$PROJECT_DIR$/src/fp_assignment_1/tasks/three.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/fp_assignment_1/tasks" />
      <method v="2" />
    </configuration>
    <configuration name="two" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="fp-assignment-1" />
      <setting name="path" value="$PROJECT_DIR$/src/fp_assignment_1/tasks/two.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/fp_assignment_1/tasks" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.core" />
        <item itemvalue="Clojure Application.two" />
        <item itemvalue="Clojure Application.four" />
        <item itemvalue="Clojure Application.one" />
        <item itemvalue="Clojure Application.three" />
      </list>
    </recent_temporary>
  </component>
  <component name="ServiceViewManager">
    <option name="viewStates">
      <list>
        <serviceView>
          <treeState>
            <expand />
            <select />
          </treeState>
        </serviceView>
      </list>
    </option>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="d6838b4c-9ebf-477b-8b56-c97d773c576b" name="Default Changelist" comment="" />
      <created>1575296041463</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1575296041463</updated>
      <workItem from="1575296043090" duration="6052000" />
      <workItem from="1575881513370" duration="1371000" />
      <workItem from="1575886523603" duration="28169000" />
      <workItem from="1576071729730" duration="5626000" />
      <workItem from="1576420486238" duration="41553000" />
      <workItem from="1576921441912" duration="84191000" />
      <workItem from="1577480741056" duration="1981000" />
      <workItem from="1577488817508" duration="93139000" />
      <workItem from="1577712221152" duration="783000" />
      <workItem from="1577713030035" duration="119491000" />
      <workItem from="1577962969271" duration="29598000" />
      <workItem from="1578079916206" duration="1655000" />
      <workItem from="1578259235434" duration="3959000" />
      <workItem from="1578324825932" duration="2360000" />
      <workItem from="1578400444748" duration="1312000" />
      <workItem from="1578460759946" duration="18940000" />
      <workItem from="1578556063856" duration="28073000" />
      <workItem from="1578730808944" duration="245000" />
      <workItem from="1579867862891" duration="663000" />
      <workItem from="1581064768470" duration="1134000" />
      <workItem from="1582885840317" duration="117000" />
      <workItem from="1585148015032" duration="52000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="WindowStateProjectService">
    <state width="958" height="982" key="GridCell.Tab.0.bottom" timestamp="1581066168894">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="958" height="982" key="GridCell.Tab.0.bottom/0.0.1920.1040@0.0.1920.1040" timestamp="1581066168894" />
    <state width="958" height="982" key="GridCell.Tab.0.center" timestamp="1581066168894">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="958" height="982" key="GridCell.Tab.0.center/0.0.1920.1040@0.0.1920.1040" timestamp="1581066168894" />
    <state width="958" height="982" key="GridCell.Tab.0.left" timestamp="1581066168894">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="958" height="982" key="GridCell.Tab.0.left/0.0.1920.1040@0.0.1920.1040" timestamp="1581066168894" />
    <state width="958" height="982" key="GridCell.Tab.0.right" timestamp="1581066168894">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="958" height="982" key="GridCell.Tab.0.right/0.0.1920.1040@0.0.1920.1040" timestamp="1581066168894" />
    <state width="1921" height="293" key="GridCell.Tab.1.bottom" timestamp="1578695481804">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="1921" height="293" key="GridCell.Tab.1.bottom/0.0.1920.1040@0.0.1920.1040" timestamp="1578695481804" />
    <state width="1921" height="293" key="GridCell.Tab.1.center" timestamp="1578695481804">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="1921" height="293" key="GridCell.Tab.1.center/0.0.1920.1040@0.0.1920.1040" timestamp="1578695481804" />
    <state width="1921" height="293" key="GridCell.Tab.1.left" timestamp="1578695481804">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="1921" height="293" key="GridCell.Tab.1.left/0.0.1920.1040@0.0.1920.1040" timestamp="1578695481804" />
    <state width="1921" height="293" key="GridCell.Tab.1.right" timestamp="1578695481804">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="1921" height="293" key="GridCell.Tab.1.right/0.0.1920.1040@0.0.1920.1040" timestamp="1578695481804" />
    <state x="1020" y="266" key="IDE.errors.dialog" timestamp="1577922614716">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="1020" y="266" key="IDE.errors.dialog/0.0.1920.1040@0.0.1920.1040" timestamp="1577922614716" />
    <state x="880" y="165" key="SettingsEditor" timestamp="1577961438762">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="880" y="165" key="SettingsEditor/0.0.1920.1040@0.0.1920.1040" timestamp="1577961438762" />
    <state width="498" height="446" key="SwitcherDM" timestamp="1577456458719">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="498" height="446" key="SwitcherDM/0.0.1920.1040@0.0.1920.1040" timestamp="1577456458719" />
    <state x="608" y="134" width="928" height="771" key="com.intellij.openapi.editor.actions.MultiplePasteAction$ClipboardContentChooser" timestamp="1577454886913">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="608" y="134" width="928" height="771" key="com.intellij.openapi.editor.actions.MultiplePasteAction$ClipboardContentChooser/0.0.1920.1040@0.0.1920.1040" timestamp="1577454886913" />
    <state x="713" y="264" key="cursive.new.repl.command.dialog.dimension" timestamp="1577896648523">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="713" y="264" key="cursive.new.repl.command.dialog.dimension/0.0.1920.1040@0.0.1920.1040" timestamp="1577896648523" />
    <state x="685" y="255" key="new project wizard" timestamp="1576006876879">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="685" y="255" key="new project wizard/0.0.1920.1040@0.0.1920.1040" timestamp="1576006876879" />
    <state x="616" y="240" width="672" height="677" key="run.anything.popup" timestamp="1578689256177">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="616" y="240" width="672" height="677" key="run.anything.popup/0.0.1920.1040@0.0.1920.1040" timestamp="1578689256177" />
    <state x="611" y="225" width="696" height="678" key="search.everywhere.popup" timestamp="1578685642807">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="611" y="225" width="696" height="678" key="search.everywhere.popup/0.0.1920.1040@0.0.1920.1040" timestamp="1578685642807" />
  </component>
  <component name="XDebuggerManager">
    <watches-manager>
      <configuration name="ClojureScriptRunConfiguration">
        <watch expression="(- (int (.charAt (clojure.string/upper-case i) 0)) 64)" language="Clojure" />
        <watch expression="(str front back)" language="Clojure" />
        <watch expression="(vector? m1)" language="Clojure" />
        <watch expression="(s/valid? vector? m1)" language="Clojure" />
        <watch expression="(number? f)" language="Clojure" />
      </configuration>
    </watches-manager>
  </component>
</project>